package main

// separate stack for seperate thread

/*

-----ЁЯза Program Execution-----

Program execute тЖТ Process create
Process create тЖТ default ржПржХржЯрж┐ thread create (main thread)
OS (Kernel) тЖТ Thread execute ржХрж░рзЗ
Thread execute тЖТ Independent task / features



------ЁЯз╖ Main Function Execution---------

ржкрзНрж░рж╛рзЯ ржкрзНрж░рждрж┐ржЯрж┐ compiled ржПржмржВ structured language-ржП execution рж╢рзБрж░рзБ рж╣рзЯ main() function ржжрж┐рзЯрзЗ,
ржХрж╛рж░ржг ржПржЯрж┐ ржПржХржЯрж┐ ржирж┐рж░рзНржзрж╛рж░рж┐ржд entry point ржпрж╛ runtime system ржмрж╛ OS ржЦрзБржБржЬрзЗ ржирж┐рзЯрзЗ ржЪрж╛рж▓рж╛рзЯред

main function тЖТ stackframe create рж╣рзЯ
main() ржПрж░ ржнрж┐рждрж░ ржЕржирзНржп function invoke тЖТ рждрж╛рж░ ржЬржирзНржп stackframe create рж╣рзЯ
ржкрзНрж░рждрж┐ржЯрж┐ Stack, ржПржХржЯрж┐ Thread ржПрж░ ржЬржирзНржп ржмрж░рж╛ржжрзНржж ржерж╛ржХрзЗ
Stack Execute тЖТ Thread Execute
Stack ржПржХржЯрж╛ ржПржХржЯрж╛ ржХрж░рзЗ рж╕ржм function execute ржХрж░рзЗред
Stack ржХрзЗ Thread execute ржХрж░рзЗред

-------ЁЯЧВя╕П Thread ржПржмржВ Stack-------

ржПржХржЯрж┐ Program execute ржХрж░рждрзЗ рж╣рж▓рзЗ multiple tasks parallely ржХрж░рждрзЗ рж╣рждрзЗ ржкрж╛рж░рзЗред
ржПрж░ ржЬржирзНржп ржжрж░ржХрж╛рж░ рж╣рзЯ Multiple Threadsред

ржкрзНрж░рждрж┐ржЯрж┐ Thread ржпржЦржи рждрзИрж░рж┐ рж╣рзЯ, рждржЦржи ржирж┐ржЬрж╕рзНржм Stack memory ржмрж░рж╛ржжрзНржж ржкрж╛рзЯред

ржПржЗ Stack ржП ржерж╛ржХрзЗ:

Local variables
Function parameters
stack frame
ржлрж╛ржВрж╢ржи ржХрж▓рзЗрж░ return address

-------ЁЯТ╛ Stack ржХрзЛржерж╛рзЯ ржерж╛ржХрзЗ-------

main thread тЖТ main stack
Linux тЖТ RAM ржП Stack ржПрж░ ржЬржирзНржп 8MB allocate рж╣рзЯ
Independent task ржПрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛ Thread рж▓рж╛ржЧржмрзЗ тЖТ new Stack тЖТ RAM ржП 8MB Storage
Process ржПрж░ ржЬржирзНржп тЖТ No. of Thread * 8MB allcoate рж╣рзЯ
Process ржП 10 Thread ржерж╛ржХрж▓рзЗ 10 * 8 = 80 MB RAM allocated рж╣рзЯ
Stack, RAM ржПрж░ ржпрзЗ ржХрзЛржи ржлрж╛ржБржХрж╛ ржЬрж╛рзЯржЧрж╛рзЯ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ
Code Segment, Data Segment, Heap тЖТ рж╕ржм thread access / use ржХрж░рждрзЗ ржкрж╛рж░рзЗ
Process, main thread ржмрж╛ржжрзЗ ржЕржирзНржп thread track / execute ржХрж░рзЗ ржирж╛
Thread тЖТ Stack ржП ржХрзЛржи variable / function ржирж╛ ржерж╛ржХрж▓рзЗ тЖТ kernel ржХрзЗ code segment, data segment ржП search ржХрж░рждрзЗ request ржХрж░рзЗ
ЁЯУМ Code Segment, Data Segment, Stack ржПрж░ size fixed ржерж╛ржХрзЗред Heap dynamically grow / shrink ржХрж░рждрзЗ ржкрж╛рж░рзЗ
   рждрж╛ржЗ data, Heap ржП ржмрзЗрж╢рж┐ рж░рж╛ржЦрж╛ рж╣рзЯред

--------ЁЯЦея╕П Kernel-------

main thread ржмрж╛ржжрзЗ ржЕржирзНржп thread тЖТ Kernel create ржХрж░рзЗ
Thread execute тЖТ Opeating System (Kernel)
Kernel decide ржХрж░рзЗ тЖТ ржХрзЛржи processor ржХрзЛржи process / thread ржХрзЗ execute ржХрж░ржмрзЗ
Kernel track рж░рж╛ржЦрзЗ тЖТ ржХрзЛржи process ржПрж░ under ржП ржХрзЯржЯрж┐ thread ржерж╛ржХрзЗ
Kernel (Modern computer) тЖТ execution ржПрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ only thread count рж░рж╛ржЦрзЗ
ЁЯза Operating System core component тЖТ Kernel; Kernel process schedule,
   concurrency / parallelism handle ржХрж░рзЗред
ЁЯз╛ Programming language ржПрж░ ржЙржкрж░ depend ржХрж░рзЗ ржХрзАржнрж╛ржмрзЗ thread create рж╣ржмрзЗред

ЁЯУМ On linux, default parent stack size is - 8MB, child stack is 8MB as well.
ЁЯУМ On windows, default parent stack size is - 1MB, child stack is 1MB as well.
ЁЯУМ On macos, default parent stack size is - 8MB, child stack is 512KB.

*/